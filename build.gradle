////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Settings
ext {
    project_group = 'com.github.rholder'
    project_version = '2.1.0-SNAPSHOT'
    project_jdk = '1.8'
    project_pom = {
        name 'guava-retrying'
        packaging 'jar'
        description "This is a small extension to Google's Guava library to allow for the creation of configurable retrying strategies for an arbitrary function call, such as something that talks to a remote service with flaky uptime."
        url 'http://rholder.github.com'

        scm {
            url 'scm:git@github.com:rholder/guava-retrying.git'
            connection 'scm:git@github.com:rholder/guava-retrying.git'
            developerConnection 'scm:git@github.com:rholder/guava-retrying.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'rholder'
                name 'Ray Holder'
            }
        }
    }

    /** Function always returns a new manifest that can be customized */
    defaultManifest = {
        return manifest {
            def git_cmd = "git rev-parse HEAD"
            def git_proc = git_cmd.execute()
            attributes 'SCM-Revision': git_proc.text.trim()
            attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
            attributes 'Build-Host': InetAddress.localHost.hostName
        }
    }

    defaultBlank = { closure ->
        try {
            closure()
        } catch (MissingPropertyException e) {
            ''
        }
    }

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Identifiers

group = project_group
version = project_version
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Plugins

apply plugin: 'java'
sourceCompatibility = project_jdk
targetCompatibility = project_jdk

apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:30.1-jre'

    // junit testing
    testCompile 'junit:junit:4.13.1'
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Artifacts

jar {
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from 'build/docs/javadoc'
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Publishing
if (isReleaseVersion && gradle.startParameter.taskNames.contains("uploadArchives")) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}


uploadArchives {
    repositories {
        mavenDeployer {
            pom.project project_pom

            repository(url: 'http://10.10.4.180:8081/repository/maven-public') {
                authentication(userName: 'jenkins-deploy', password: 'deploy')
            }
            snapshotRepository(url: 'http://10.10.4.180:8081/repository/maven-snapshots') {
                authentication(userName: 'jenkins-deploy', password: 'deploy')
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDE

idea {
    module {
        downloadSources = true
    }
    project {
        languageLevel = project_jdk
        vcs = 'Git'
    }
}